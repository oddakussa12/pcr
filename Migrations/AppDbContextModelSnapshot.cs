// <auto-generated />
using System;
using ASP.NET_CORE_MVC_EMP_MGMT.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ASP.NET_CORE_MVC_EMP_MGMT.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Actiono", b =>
                {
                    b.Property<int>("ActionoCode")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionnoStatus");

                    b.Property<DateTime>("ActionoDeadline");

                    b.Property<string>("ActionoDescription")
                        .IsRequired();

                    b.Property<DateTime>("ActionoLastUpdate");

                    b.Property<string>("ActionoOwner")
                        .IsRequired();

                    b.Property<string>("ActionoResponsible")
                        .IsRequired();

                    b.Property<int?>("ProjectProjectCode");

                    b.HasKey("ActionoCode");

                    b.HasIndex("ProjectProjectCode");

                    b.ToTable("Actionos");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeCity")
                        .IsRequired();

                    b.Property<string>("EmployeeGender")
                        .IsRequired();

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            EmployeeCity = "Pawi",
                            EmployeeGender = "Male",
                            EmployeeName = "Beniyam"
                        });
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Issue", b =>
                {
                    b.Property<int>("IssueCode")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("IssueAgreedSolution")
                        .IsRequired();

                    b.Property<DateTime>("IssueCloseDate");

                    b.Property<string>("IssueDescription")
                        .IsRequired();

                    b.Property<int>("IssueImpact");

                    b.Property<DateTime>("IssueOpenDate");

                    b.Property<string>("IssueOwner")
                        .IsRequired();

                    b.Property<int>("IssueStatus");

                    b.Property<int?>("ProjectProjectCode");

                    b.HasKey("IssueCode");

                    b.HasIndex("ProjectProjectCode");

                    b.ToTable("Issues");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Issue");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Project", b =>
                {
                    b.Property<int>("ProjectCode")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName")
                        .IsRequired();

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("Progress");

                    b.Property<string>("ProjectPM_Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("projectName")
                        .IsRequired();

                    b.HasKey("ProjectCode");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Register", b =>
                {
                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfirmPassword");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Email");

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Risk", b =>
                {
                    b.Property<int>("RiskCode")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("ProjectProjectCode");

                    b.Property<string>("RiskAgreedSolution")
                        .IsRequired();

                    b.Property<DateTime>("RiskCloseDate");

                    b.Property<string>("RiskDescription")
                        .IsRequired();

                    b.Property<int>("RiskImpact");

                    b.Property<DateTime>("RiskOpenDate");

                    b.Property<string>("RiskOwner")
                        .IsRequired();

                    b.Property<int>("RiskStatus");

                    b.HasKey("RiskCode");

                    b.HasIndex("ProjectProjectCode");

                    b.ToTable("Risks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Risk");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleCode")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectProjectCode");

                    b.Property<DateTime>("ScheduleDueDate");

                    b.Property<string>("ScheduleDuration")
                        .IsRequired();

                    b.Property<string>("ScheduleResourceName")
                        .IsRequired();

                    b.Property<DateTime>("ScheduleStartDate");

                    b.Property<string>("ScheduleTaskName")
                        .IsRequired();

                    b.HasKey("ScheduleCode");

                    b.HasIndex("ProjectProjectCode");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.EditUpdateIssue", b =>
                {
                    b.HasBaseType("ASP.NET_CORE_MVC_EMP_MGMT.Models.Issue");

                    b.Property<int>("Id");

                    b.HasDiscriminator().HasValue("EditUpdateIssue");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.EditUpdateRisk", b =>
                {
                    b.HasBaseType("ASP.NET_CORE_MVC_EMP_MGMT.Models.Risk");

                    b.Property<int>("Id");

                    b.HasDiscriminator().HasValue("EditUpdateRisk");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Actiono", b =>
                {
                    b.HasOne("ASP.NET_CORE_MVC_EMP_MGMT.Models.Project", "Project")
                        .WithMany("Actionos")
                        .HasForeignKey("ProjectProjectCode");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Issue", b =>
                {
                    b.HasOne("ASP.NET_CORE_MVC_EMP_MGMT.Models.Project", "Project")
                        .WithMany("Issues")
                        .HasForeignKey("ProjectProjectCode");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Risk", b =>
                {
                    b.HasOne("ASP.NET_CORE_MVC_EMP_MGMT.Models.Project", "Project")
                        .WithMany("Risks")
                        .HasForeignKey("ProjectProjectCode");
                });

            modelBuilder.Entity("ASP.NET_CORE_MVC_EMP_MGMT.Models.Schedule", b =>
                {
                    b.HasOne("ASP.NET_CORE_MVC_EMP_MGMT.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectProjectCode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
